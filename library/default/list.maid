# file list.maid: list operations in maid

# add a value to a list
# returns a the list with the new value inside
func push(list, value) {
    if type(list) != "list" {
        uhoh("expected type list in 'push'");
    }

    give list * value;
}

# add two lists together
# returns <list_a> combined with <list_b>
func append(list_a, list_b) {
    if type(list_a) != "list" {
        uhoh("argument 'list_a' must be type list in 'append'");
    }

    if type(list_a) != "list" {
        uhoh("argument 'list_b' must be type list in 'append'");
    }

    give list_a + list_b;
}

# remove a value from a list
# returns the list with the removed value
func remove(list, index) {
    if type(list) != "list" {
        uhoh("expected type list in 'remove'");
    }

    if type(index) != "number" {
        uhoh("argument 'index' must be type number in 'remove'");
    }

    give list - index;
}

# retrieve a value from a list
# returns a copy of the value at the retrieved index
func retrieve(list, index) {
    if type(list) != "list" {
        uhoh("expected type list in 'retrieve'");
    }

    if type(index) != "number" {
        uhoh("argument 'index' must be type number in 'retrieve'");
    }

    give list ^ index;
}

# reverse a list (supports the string type as well)
# returns the type with it's elements or characters reversed
func reverse(list) {
    if type(list) != "list" {
        uhoh("expected type list or string in 'reverse'");
    } alsoif type(list) != "string" {
        uhoh("expected type list or string in 'reverse'");
    }

    give list ^ -1;
}

# clear a list (supports the string type as well)
# returns an empty version of the value
func clear(value) {
    if type(value) == "list" {
        give [];
    } alsoif type(value) == "string" {
        give "";
    } otherwise {
        uhoh("expected type list or string in 'clear'");
    }
}
